mods.alchemistry.dissolver.recipeBuilder()
    .input(item('amc_lts:antimatter_white'))
    .probabilityOutput(10, item('minecraft:air'))
    .probabilityOutput(10, element('silicon_dioxide'))
    .probabilityOutput(1, element('tantalum'))
    .relativeProbability(true)
    .rolls(1)
    .register()

mods.alchemistry.dissolver.recipeBuilder()
    .input(item('amc_lts:antimatter_light_gray'))
    .probabilityOutput(5, item('minecraft:air'))
    .probabilityOutput(15, element('iron'))
    .probabilityOutput(40, element('silicon_dioxide'))
    .probabilityOutput(5, element('carbon'))
    .probabilityOutput(1, element('tantalum'))
    .relativeProbability(true)
    .rolls(1)
    .register()

mods.alchemistry.dissolver.recipeBuilder()
    .input(item('amc_lts:antimatter_orange'))
    .probabilityOutput(5, item('minecraft:air'))
    .probabilityOutput(15, element('copper'))
    .probabilityOutput(10, element('silicon_dioxide'))
    .probabilityOutput(3, element('tantalum'))
    .relativeProbability(true)
    .rolls(1)
    .register()

mods.alchemistry.dissolver.recipeBuilder()
    .input(item('amc_lts:antimatter_red'))
    .probabilityOutput(5, item('minecraft:air'))
    .probabilityOutput(15, element('iron_oxide'))
    .probabilityOutput(10, element('strontium'))
    .probabilityOutput(5, element('silicon_dioxide'))
    .relativeProbability(true)
    .rolls(1)
    .register()

mods.alchemistry.dissolver.recipeBuilder()
    .input(item('amc_lts:antimatter_gray'))
    .probabilityOutput(5, item('minecraft:air'))
    .probabilityOutput(25, element('iron'))
    .probabilityOutput(8, element('tantalum'))
    .probabilityOutput(6, element('carbon'))
    .relativeProbability(true)
    .rolls(1)
    .register()

mods.alchemistry.dissolver.recipeBuilder()
    .input(item('amc_lts:antimatter_pink'))
    .probabilityOutput(5, item('minecraft:air'))
    .probabilityOutput(30, element('magnesium'))
    .probabilityOutput(20, element('phosphorus'))
    .probabilityOutput(5, element('carbon'))
    .relativeProbability(true)
    .rolls(1)
    .register()

mods.alchemistry.dissolver.recipeBuilder()
    .input(item('amc_lts:antimatter_black'))
    .probabilityOutput(5, item('minecraft:air'))
    .probabilityOutput(30, element('aluminum'))
    .probabilityOutput(20, element('carbon'))
    .probabilityOutput(5, element('tantalum'))
    .relativeProbability(true)
    .rolls(1)
    .register()

mods.alchemistry.dissolver.recipeBuilder()
    .input(item('amc_lts:antimatter_magenta'))
    .probabilityOutput(5, item('minecraft:air'))
    .probabilityOutput(10, element('gallium'))
    .probabilityOutput(2, element('manganese'))
    .probabilityOutput(1, element('tantalum'))
    .relativeProbability(true)
    .rolls(1)
    .register()

mods.alchemistry.dissolver.recipeBuilder()
    .input(item('amc_lts:antimatter_light_blue'))
    .probabilityOutput(10, item('minecraft:air'))
    .probabilityOutput(10, element('niobium'))
    .probabilityOutput(1, element('germanium'))
    .probabilityOutput(1, element('tantalum'))
    .relativeProbability(true)
    .rolls(1)
    .register()

mods.alchemistry.dissolver.recipeBuilder()
    .input(item('amc_lts:antimatter_yellow'))
    .probabilityOutput(6, item('minecraft:air'))
    .probabilityOutput(4, element('sulfur'))
    .probabilityOutput(3, element('scandium'))
    .probabilityOutput(3, element('chromium'))
    .relativeProbability(true)
    .rolls(1)
    .register()

mods.alchemistry.dissolver.recipeBuilder()
    .input(item('amc_lts:antimatter_lime'))
    .probabilityOutput(9, item('minecraft:air'))
    .probabilityOutput(5, element('neon'))
    .probabilityOutput(3, element('bromine'))
    .probabilityOutput(1, element('tantalum'))
    .relativeProbability(true)
    .rolls(1)
    .register()

mods.alchemistry.dissolver.recipeBuilder()
    .input(item('amc_lts:antimatter_cyan'))
    .probabilityOutput(6, item('minecraft:air'))
    .probabilityOutput(9, element('barium'))
    .probabilityOutput(3, element('indium'))
    .probabilityOutput(1, element('tantalum'))
    .probabilityOutput(2, element('mercury'))
    .relativeProbability(true)
    .rolls(1)
    .register()

mods.alchemistry.dissolver.recipeBuilder()
    .input(item('amc_lts:antimatter_purple'))
    .probabilityOutput(5, item('minecraft:air'))
    .probabilityOutput(8, element('iodine'))
    .probabilityOutput(3, element('vanadium'))
    .probabilityOutput(1, element('tantalum'))
    .relativeProbability(true)
    .rolls(1)
    .register()

mods.alchemistry.dissolver.recipeBuilder()
    .input(item('amc_lts:antimatter_blue'))
    .probabilityOutput(5, item('minecraft:air'))
    .probabilityOutput(8, element('argon'))
    .probabilityOutput(3, element('neptunium'))
    .probabilityOutput(1, element('tantalum'))
    .relativeProbability(true)
    .rolls(1)
    .register()

mods.alchemistry.dissolver.recipeBuilder()
    .input(item('amc_lts:antimatter_brown'))
    .probabilityOutput(5, item('minecraft:air'))
    .probabilityOutput(8, element('neodymium'))
    .probabilityOutput(3, element('samarium'))
    .probabilityOutput(1, element('tantalum'))
    .relativeProbability(true)
    .rolls(1)
    .register()

mods.alchemistry.dissolver.recipeBuilder()
    .input(item('amc_lts:antimatter_green'))
    .probabilityOutput(5, item('minecraft:air'))
    .probabilityOutput(8, element('rubidium'))
    .probabilityOutput(3, element('tellurium'))
    .probabilityOutput(1, element('tantalum'))
    .relativeProbability(true)
    .rolls(1)
    .register()
